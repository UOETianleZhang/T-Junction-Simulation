/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

/*File Name: main.c
Project Name: Traffic_Light
Target Device/Platform: Basys3 Board (with Microblaze processor on the Artix-7 FPGA)
Tool Version: Xilinx SDK 2015.2
Name: Tianle Zhang
Company: University of Edinburgh
Creation Date and Time: 11/11/2016; 14:07
Description:
This project is to display a traffic light for two roads.
There are 3 traffic lights for each road: red (R), yellow (Y) and green (G).
Each light can be represented by one of the regions in the VGA display.
Just as the traffic lights in the UK, these three lights operate as: R RY G Y R RY G Y R...
(duration is set to 2 s for each light and is displayed on the 7-segment display).
The traffic lights for road 1 should run through this cycle first,
then those of road 2 should run, and then road 1, and so on.

Every time a pedestrian button is pressed,
the pedestrian light (PD Go or Stop) will be turned on for 5 seconds indicating that it is time to go across.
This time is also displayed on the 7-segment display.
Moreover, when the pedestrian has 2 (out of 5) more seconds to go,
the pedestrian light will blink 5 times (in these remaining 2 seconds).
An indicator LED on the Basys 3 board will light up once the pedestrian button is pressed.
This LED will go off once the pedestrian has been allowed to cross.
The pedestrian light will be turned on only when both 2 roads are RED.

The pedestrian button is linked with left button.
The pedestrian light is linked with the very left led(L1).
The light of road1 is linked with no.3 (green), no.4 (yellow)and no.5 (red) leds.
The light of road2 is linked with no.0 (green), no.1 (yellow)and no.2 (red) leds.
*/

#include <stdio.h>
#include "platform.h"
#include "gpio_init.h"
#include "xgpio.h"
#include "control.h"
#include "interface.h"
#include "seg7_display.h"
#include "xil_types.h"
#include "extra.h"

int main()
{
	//initialise XGpio interface
    init_platform();
    XStatus Status;
    Status = initGpio();
    //active interrupt
    Status = setUpInterruptSystem();
    if (Status != XST_SUCCESS) {
    print("Interrupt system setup failed!\n\r");
    cleanup_platform();
    return 0;
    }

    u16 leddisplay=0;
    int pushBtnLeftIn;
    int Switch_16=0;
    timedisplay=0;	//defined in control.h
    mode=0;			//defined in control.h
    carMode = 0;
    target_x = 330;
	target_y = 200;

    while(1)
    {
    	//DisplayCarByPosition();
    	ColourCar1();
		XGpio_DiscreteWrite(&VGA_REGION_0,1,region_0);
		XGpio_DiscreteWrite(&VGA_REGION_1,1,region_1);
		XGpio_DiscreteWrite(&VGA_REGION_2,1,region_2);
		XGpio_DiscreteWrite(&VGA_REGION_3,1,target2_x);
		XGpio_DiscreteWrite(&VGA_REGION_4,1,region_4);
		XGpio_DiscreteWrite(&VGA_REGION_5,1,target2_y);
		XGpio_DiscreteWrite(&VGA_REGION_6,1,region_6);
		XGpio_DiscreteWrite(&VGA_REGION_7,1,region_7);
		XGpio_DiscreteWrite(&VGA_REGION_8,1,region_8);
		XGpio_DiscreteWrite(&VGA_REGION_9,1,target_x);
		XGpio_DiscreteWrite(&VGA_REGION_10,1,target_y);
		XGpio_DiscreteWrite(&VGA_REGION_11,1,target_colour);

		pushBtnLeftIn= XGpio_DiscreteRead(&P_BTN_LEFT, 1);
		XGpio_DiscreteWrite(&LED_OUT,1,leddisplay);

		transmit(&leddisplay);					//get the value of leddisplay from control.c
		Switch_16 = getSwitch(16);
		Switch(Switch_16, 16);
		carMode = getSwitch(15);
		//Button(pushBtnLeftIn);
		//if button is pressed,
		//a series of activities will be taken on the pedestrian light
		displayLightbyMode(mode);				//traffic light loops in sequential states
		displayNumber(timedisplay,0 SECOND);	//display remaining time by decimal

    }

    cleanup_platform();
    return 0;
}
